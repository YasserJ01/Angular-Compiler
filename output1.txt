Program{
SourceElements{
[Statement{
ImportStatement{
import
ImportFromBlock{
ImportModuleItems
{importAliasName=[
ModuleExportName
IdentifierName{
identifier='Component'
}
}
}
}]
}
ImportFrom
{StringLiteral=''@angular/core'
}}
}
}, Statement{
ExpressionStatement{
ExpressionSequence{
[SingleExpression{
IdentifierName{
ReservedWord{
Keyword=Keyword{Interface='interface
}'
}
}
SingleExpression{
IdentifierName{
identifier='Product'
}
}
null
}
}]
}
}
}, Statement{
block=133statementListStatementList{
statement=[Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='productId'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='number'
}
}
}
}
}
[]
null
null
, as='null
}]
}
}
}, Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='name'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='string'
}
}
}
}
}
[]
null
null
, as='null
}]
}
}
}, Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='price'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='number'
}
}
}
}
}
[]
null
null
, as='null
}]
}
}
}, Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='imgSrc'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='string'
}
}
}
}
}
[]
null
null
, as='null
}]
}
}
}, Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='details'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='string'
}
}
}
}
}
[]
null
null
, as='null
}]
}
}
}]
}
}
}, Statement{
ClassDeclaration{
decoratorList=
decorator=[
decoratorMemberExpression=null
, decoratorCallExpression=
decoratorMemberExpression=
identifier='Component'
}
}
Arguments{
ArgumentList{
[Argument{
SingleExpression{

ObjectLiteral{
[PropertyAssignment{
PropertyName{
IdentifierName{
Identifier{Selector='selector
}
}
}
[SingleExpression{

Literal{
, stringLiteral=''app-root'
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='template'
}
}
}
[SingleExpression{

HtmlElement{
HtmlTagStartName{
HtmlTagName{
Identifier='div'
}
}
[]
HtmlContent{
[HtmlElement{
HtmlTagStartName{
HtmlTagName{
Identifier='button'
}
}
[HtmlAttribute{
HtmlAttributeName{
AngularDirective='*ngFor'
}
null
HtmlAttributeValue{stringLiteral='"let item of products"
}
}, HtmlAttribute{
HtmlAttributeName{
Identifiers=[click]
}
null
HtmlAttributeValue{stringLiteral='"setChoosenProduct(item.productId)"
}
}]
HtmlContent{
[HtmlElement{
HtmlTagStartName{
HtmlTagName{
Identifier='app-product-list'
}
}
[HtmlAttribute{
HtmlAttributeName{
Identifiers=[data]
}
null
HtmlAttributeValue{stringLiteral='"item"
}
}]
HtmlContent{
[]
[]
}
HtmlTagClosingName{
HtmlTagName{
Identifier='app-product-list'
}}
}]
[]
}
HtmlTagClosingName{
HtmlTagName{
Identifier='button'
}}
}, HtmlElement{
HtmlTagStartName{
HtmlTagName{
Identifier='app-product-details'
}
}
[HtmlAttribute{
HtmlAttributeName{
Identifiers=[item]
}
null
HtmlAttributeValue{stringLiteral='"products[choosenProduct]"
}
}]
HtmlContent{
[]
[]
}
HtmlTagClosingName{
HtmlTagName{
Identifier='app-product-details'
}}
}]
[]
}
HtmlTagClosingName{
HtmlTagName{
Identifier='div'
}}
}
}]
}]
}
}}]}}
}
}]
}
, Export='export
, Class='class
, identifier=identifier='AppComponent'
}
ClassHeritage{}
ClassTail{
[ClassElement{
Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='products'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
[PrimaryType{
TypeReference{typeName=TypeName{identifier=identifier='Product'
}}}
}]
}
}
}
}
[SingleExpression{

ArrayLiteral{
ElementList{
[ArrayElement{
SingleExpression{

ObjectLiteral{
[PropertyAssignment{
PropertyName{
IdentifierName{
identifier='productId'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='0
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='name'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"ProductName1"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='price'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='200
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='imgSrc'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"../Files/pizza.png"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='details'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"Product Details 1"
}
}]
}]
}
}
}, ArrayElement{
SingleExpression{

ObjectLiteral{
[PropertyAssignment{
PropertyName{
IdentifierName{
identifier='productId'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='1
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='name'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"ProductName2"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='price'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='400
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='imgSrc'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"../Files/salad.png"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='details'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"Product Details 2"
}
}]
}]
}
}
}, ArrayElement{
SingleExpression{

ObjectLiteral{
[PropertyAssignment{
PropertyName{
IdentifierName{
identifier='productId'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='2
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='name'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"ProductName3"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='price'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='700
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='imgSrc'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"../Files/sandwich.png"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='details'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"Product Details 3"
}
}]
}]
}
}
}, ArrayElement{
SingleExpression{

ObjectLiteral{
[PropertyAssignment{
PropertyName{
IdentifierName{
identifier='productId'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='3
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='name'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"ProductName4"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='price'
}
}
}
[SingleExpression{

Literal{, numericLiteral=NumericLiteral{decimalLiteral='500
}
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='imgSrc'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"../Files/soup.png"
}
}]
}, PropertyAssignment{
PropertyName{
IdentifierName{
identifier='details'
}
}
}
[SingleExpression{

Literal{
, stringLiteral='"Product Details 4"
}
}]
}]
}
}
}]
}
}
}]
null
null
, as='null
}]
}
}
}
}, ClassElement{
Statement{
VariableStatement{
VariableDeclarationList{
[VariableDeclaration{
IdentifierOrKeyWord{
identifier='choosenProduct'
}
}
null
null
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='number'
}
}
}
}
}
[SingleExpression{
singleExpression=SingleExpression{
IdentifierName{
ReservedWord{
NullLiteral='null'
}
}
null
}
}]
null
null
, as='null
}]
}
}
}
}, ClassElement{
PropertyMemberDeclaration{

PropertyName{
IdentifierName{
identifier='setChoosenProduct'
}
}
}
CallSignature{ParameterList{
[Parameter{
RequiredParameter{
IdentifierOrPattern{
identifierName=IdentifierName{
identifier='productId'
}
}}
TypeAnnotation{
Type_{
UnionOrIntersectionOrPrimaryType{
PrimaryType{
PredefinedType{any='number'
}
}
}
}
}
}
}]
}
}
FunctionBody{
SourceElements{
[Statement{
ExpressionStatement{
ExpressionSequence{
[SingleExpression{
singleExpression=SingleExpression{
IdentifierName{
identifier='choosenProduct'
}
}
SingleExpression{
This=this
}
}
}]
}
}
}]
}
}
}
}]
}
}
}]
}
}